# >>>> INPUT

import "../../lib/std.tao"

$[main]
def main = {}

# >>>> OUTPUT

[]

# >>>> INPUT

import "../../lib/std.tao"

$[main]
def main = { b: 6, a: True, c: () }

# >>>> OUTPUT

[#1 [], 6i, []]

# >>>> INPUT

import "../../lib/std.tao"

$[main]
def main =
	let r = { a: True, b: 5 } in
	if r.a
	then r.b
	else 0

# >>>> OUTPUT

5i

# >>>> INPUT

import "../../lib/std.tao"

fn fold2 A, B : A -> (A -> B -> A) -> [B] -> A =
	| init, _, [] => init
	\ init, f, [x .. tail] => fold2(f(init, x), f, tail)

# Emulated typeclass
data Add A = {
  add: A -> A -> A
}

# Implementation of a typeclass
def add_nat = Add {
  add: fn x: Nat, y => x + y
}

# Emulated typeclass
data Summable A = {
  add: Add A,
  zero: A,
}

# Implementation of a typeclass
def summable_nat = Summable {
  add: add_nat,
  zero: 0,
}

# Generic summing function
fn sum2 A : Summable A -> [A] -> A =
	summable => fold2(summable.zero, summable.add.add)

$[main]
def main = [1, 2, 3, 4, 5, 6, 7, 8, 9]:sum2(summable_nat)

# >>>> OUTPUT

45i
