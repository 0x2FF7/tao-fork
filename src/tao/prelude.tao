# Strings

type Str = [Char]

# IO

type Io A = Universe -> (A, Universe)

fn nothing |uni of Universe| ((), uni)
fn out_char |c, uni| ((), @out(c, uni))
fn in_char |uni| @in(uni)

fn input || do io {
	c <- in_char;
	if c = '\n'
	then do io { return [c]; }
	else do io {
		cs <- input;
		return [c] ++ cs;
	};
}

fn print |cs| do io {
	match cs {
		| [c, cs: ...] => do io {
			out_char(c);
			print(cs);
		}
		| [] => do io { return (); }
	}
}

# Errors

def unreachable A of Str -> A = |s| unreachable(s)

# Monadic IO

fn io_make A |x of A|
	|uni of Universe| (x, uni)

fn io_bind A B |b of ? -> Io B, a of Io A|
	|uni| let (x, uni) = a(uni) in b(x, uni)

fn io_next A B |b of Io B, a of Io A|
	|uni| let (_, uni) = a(uni) in b(uni)

# Lists

fn contains |cs of [Char], c| match cs {
	| [c1, cs: ...] => c1 = c or contains(cs, c)
	| [] => false
}

fn len A |xs of [A]| match xs {
	| [_, xs: ...] => 1 + xs:len
	| [] => 0
}

fn nth A |n, xs of [A]| match (n, xs) {
	| (n, [head, tail: ...]) => if n < 1
		then Just head
		else nth(n - 1, tail)
	| _ => None
}

fn fold_l A B |init, f of B -> A -> ?, xs| match xs {
	| [x, xs: ...] => fold_l(f(init, x), f, xs)
	| [] => init
}

fn reduce_l A B |f, (init, xs) of (A, [B])| fold_l(init, f, xs)

fn fold_r A B |init, f of A -> B -> ?, xs| match xs {
 	| [x, xs: ...] => f(x, fold_r(init, f, xs))
	| [] => init
}

fn reduce_r A B |f, (xs, init) of ([B], A)| fold_r(init, f, xs)

fn map A B |f of A -> B, xs| match xs {
	| [] => []
	| [x, xs: ...] => [x:f] ++ xs:map(f)
}

fn concat A |xs of [[A]]| match xs {
	| [x, xs: ...] => x ++ xs:concat
	| [] => []
}

# Numeric lists

def sum = fold_l(0, |a, x| a + x)

def product = fold_l(1, |a, x| a * x)

# Maybe

data Maybe A =
	| Just A
	| None

# Result

data Result A E =
	| Ok A
	| Err E
