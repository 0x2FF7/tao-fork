import "../lib/main.tao"

fn yield A : A -> yield A ~ () =
    x => @{ @suspend(x) }
fn do_print : Str -> print ~ () =
    s => @{ @suspend(s) }

effect yield A = A => ()

effect print = Str => ()

# Counts the natural numbers, yielding each one to the caller
fn count_range : Nat -> Nat -> yield Nat ~ () =
    n, max => @{
        if n < max
        then @{
            yield(n)!;
            count_range(n + 1, max)!;
        }!
        else ()
    }

# Prints the natural numbers to the console
def print_nats : print ~ () = @{
    count_range(0, 10)
        handle yield Nat with n => do_print("Next nat: " + n->show)!
}

effect get_name = () => Str

# This will be implicit later
def get_name : get_name ~ Str = @{ @suspend(()) }

def hello : get_name ~ Str = @{
    let name = get_name! in
    "Hello, " ++ name ++ "!"
}

fn hello_to : Str -> Str =
    name => hello
        handle get_name with () => name

def hello_to_you = hello_to("you")

def main : io ~ () = @{
    print_nats
        handle print with s => print(s)!
}
