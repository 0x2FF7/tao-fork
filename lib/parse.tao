type Str = [Char]

def len A =
	| []: [A] => 0
	\ [_ .. tail] => 1 + tail:len

def fold A, B : ? -> (? -> A -> ?) -> ? -> B =
	| init, _, [] => init
	\ init, f, [x .. tail] => fold(f(init, x), f, tail)

def reduce A, B =
	\ f, (init, xs) : (A, [B]) => fold(init, f, xs)

def fold_r A, B =
	| init, _, [] => init
	\ init, f : A -> B -> ?, [x .. xs] => f(x, fold_r(init, f, xs))

def reduce_r A, B =
	\ f, (xs, init) : ([B], A) => fold_r(init, f, xs)

data Maybe A =
	| Just A
	\ None

data Result A, E =
	| Ok A
	\ Err E

def map_res A, B, E : (A -> B) -> Result A E -> Result B E =
	| f, Ok ok => Ok ok:f
	\ _, Err err => Err err

data ParseErr I =
	| UnexpectedEnd
	| ExpectedFound (I, I)
	| ExpectedPat Str
	\ ExpectedMore

type Parser I, O = [I] -> Result (O, [I]) (ParseErr I)

def filter I, O : (I -> Result O (ParseErr I)) -> Parser I O =
	| _, [] => Err UnexpectedEnd
	\ f, [head .. tail] => head:f:map_res(fn o => (o, tail))

def just = fn c: Char => filter(fn head => if head = c
	then Ok head
	else Err ExpectedFound (c, head))

def and_then I, O, U : Parser I U -> Parser I O -> Parser I (O, U) =
	\ b, a, xs => match xs:a in
		| Err err => Err err
		\ Ok (a, xs) => match xs:b in
			| Err err => Err err
			\ Ok (b, xs) => Ok ((a, b), xs)

def or_else I, O : Parser I O -> Parser I O -> Parser I O =
	\ a, b, xs => match xs:a in
		| ok ~ Ok _ => ok
		\ Err _ => match xs:b in
			| ok ~ Ok _ => ok
			\ err ~ Err _ => err

def repeated I, O : Parser I O -> Parser I [O] =
	\ a, xs => match xs:a in
		| Ok (out, tail) => match tail:repeated(a) in
			| Ok (items, tail) => Ok ([out .. items], tail)
			\ err ~ Err _ => Ok ([], tail)
		\ Err err => Ok ([], xs)

def repeated_at_least I, O : Nat -> Parser I O -> Parser I [O] =
	\ n, a, xs => match xs:repeated(a) in
		| ok ~ Ok (out, tail) => if out:len >= n
			then ok
			else Err ExpectedMore
		\ err ~ Err _ => err

def map I, O, U : (O -> U) -> Parser I O -> Parser I U =
	\ f, a, xs => xs:a:map_res(fn (out, tail) => (out:f, tail))

def then_ignore I, O, U : Parser I U -> Parser I O -> Parser I O =
	\ b, a => a
		:and_then(b)
		:map(fn (a, _) => a)

def ignore_then I, O, U : Parser I U -> Parser I O -> Parser I U =
	\ b, a => a
		:and_then(b)
		:map(fn (_, b) => b)

def whitespace = just(' ')
	:or_else(just('\t'))

def whitespaces = whitespace:repeated

def padded O : ? -> Parser Char O =
	\ a => whitespaces
		:ignore_then(a)
		:then_ignore(whitespaces)

def recurse I, O : Parser I O -> Parser I O =
	\ f, xs => match xs:f in
		| Ok (out, tail) => Ok (out, tail)
		\ Err e => Err e

data FindErr =
	\ NotFound

def find_start : Nat -> Char -> Str -> Result Nat FindErr =
	| idx, c, [head .. tail] => if c = head
		then Ok idx
		else tail:find_start(idx + 1, c)
	\ idx, c, [] => Err NotFound

def find = find_start(0)

def char_to_num =
	\ c => "0123456789":find(c)

def digit = filter(fn c => match c:char_to_num in
	| Ok n => Ok n
	\ Err NotFound => Err ExpectedPat "digit")

def number = digit
	:repeated_at_least(1)
	:map(fn xs => xs:fold(0, fn a, x => a * 10 + x))
	:padded

data Unary =
	\ Neg

data Binary =
	| Add
	| Sub
	\ Mul

data Expr =
	| Natural Nat
	| Unary (Unary, Expr)
	\ Binary (Binary, Expr, Expr)

def atom = number
	:map(fn x => Natural x)
	:or_else(just('(')
		:padded
		:ignore_then(recurse(fn xs => xs:expr))
		:then_ignore(just(')'))
		:padded)

def op =
	\ c => just(c):padded

def unary = op('-')
	:map(fn _ => Neg)
	:repeated
	:and_then(atom)
	:map(reduce_r(fn op, a => Unary (op, a)))

def product = unary
	:and_then(op('*'):map(fn _ => Mul)
		:and_then(unary)
		:repeated)
	:map(reduce(fn a, (op, b) => Binary (op, a, b)))

def sum = product
	:and_then(op('*'):map(fn _ => Add)
		:or_else(op('-'):map(fn _ => Sub))
		:and_then(product)
		:repeated)
	:map(reduce(fn a, (op, b) => Binary (op, a, b)))

def expr : Parser Char Expr = sum

def eval =
	| Natural x => --x
	| Unary (Neg, a) => -a:eval
	| Binary (Add, a, b) => a:eval + b:eval
	| Binary (Sub, a, b) => a:eval - b:eval
	\ Binary (Mul, a, b) => a:eval * b:eval

$[main]
def main =
	let parser = expr:map(eval) in
	parser("2 * (5 - 1)")
