#! Utilities for programming with lists.

import "lib/core/ops.tao"
import "lib/std/value.tao"
import "lib/std/container.tao"

for A, B member [A] of Map B =
    => Item = A
    => Output = [B]
    => map = fn
        | _, [] => []
        \ f, [x .. xs] => [x:f .. xs:Self.map(f)]

for A, B member [B] of Fold A =
    => Item = B
    => fold = fn
        | a, _, [] => a
        \ a, f, [x .. xs] => Self.fold(f(a, x), f, xs)

# fn map A, B : (A -> B) -> [A] -> [B] =
#     | _, [] => []
#     \ f, [x .. xs] => [x:f .. xs:map(f)]

fn filter A : (A -> Bool) -> [A] -> [A] =
    | _, [] => []
    \ f, [x .. xs] => (if x:f then [x] else []) ++ xs:filter(f)

fn find_first A : (A -> Bool) -> [A] -> Maybe A = f, xs => match xs:filter(f) in
    | [] => None
    \ [x ..] => Just x

fn len A : [A] -> Nat = xs => @len_list(xs)

# fn fold A, B : A -> (A -> B -> A) -> [B] -> A =
#     | init, _, [] => init
#     \ init, f, [x .. tail] => fold(f(init, x), f, tail)

fn repeat A : Nat -> [A] -> [A] =
    | 0, _ => []
    \ n + 1, x => x ++ x:repeat(n)

fn swap A : Nat -> (A -> A) -> [A] -> [A] = n, f, xs => match @skip_list(xs, n) in
    | [] => xs
    \ [x .. tail] => @trim_list(xs, n) ++ [x:f .. tail]

fn nth A : Nat -> [A] -> Maybe A = n, xs => match @skip_list(xs, n) in
    | [x ..] => Just x
    \ [] => None

fn sort A < Ord : [A] -> [A] =
    | [] => []
    \ [mid .. xs] =>
        xs:filter(fn x => x < mid):sort
            ++
        [mid]
            ++
        xs:filter(fn x => x >= mid):sort

def sum A : [A] -> A where
    A < Zero + Add A with { Output = A },
=
    fold(A.zero, fn x, y => x + y)

def product A : [A] -> A where
    A < One + Mul A with { Output = A }
=
    fold(A.one, fn x, y => A.mul(x, y))
