import "../core/monad.tao"

effect input = () => Str
effect print = Str => ()
effect io = input + print

# Core monadic IO operations

fn __print : Str -> IO () = s, uni =>
    let uni = @print(uni, s) in
    (uni, ())

fn __input : IO Str = uni => @input(uni)

# High-level effect IO operations

def input : input ~ Str = do { @suspend(()) }

fn print : Str -> print ~ () = s => do { @suspend(s) }
