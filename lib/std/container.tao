#! Utilities for manipulating and traversing containers.

import "math.tao"

class Map B =
    => Item
    => Output
    => map : (Self.Item -> B) -> Self -> Self.Output

def map V < Map B, B : (V.Item -> B) -> V -> V.Output = V.map

class Iter =
    => Item
    => next : Self -> Maybe (Self.Item, Self)

fn fold A, I < Iter : A -> (A -> I.Item -> A) -> I -> A = a, f, xs => match I.next(xs) in
    | None => a
    \ Just (x, xs) => fold(f(a, x), f, xs)

def sum C, A : C -> A where
    C < Iter with { Item = A },
    A < Zero + Add A with { Output = A },
= fold(A.zero, fn x, y => x + y)

def product C, A : C -> A where
    C < Iter with { Item = A },
    A < One + Mul A with { Output = A },
= fold(A.one, fn x, y => x * y)
