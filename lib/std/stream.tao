#! Streams and stream combinators.
#!
#! In other languages, streams are often called 'iterators'.

import "lib/std/value.tao"

# type Sum = (Nat | Num)
# fn foo : Sum = &5

class Stream =
    => Item
    => next : Self -> (Maybe Self.Item, Self)

class IntoStream =
    => Stream
    => into : Self -> Self.Stream

# TODO: Make blanket impls work
# for S < Stream member S of IntoStream =
#     => Stream = S
#     => into = identity

for A member [A] of IntoStream =
    => Stream = List A
    => into = fn xs => List xs

fn into_stream A < IntoStream =
    \ s => A.into(s)

data List A = [A]

for A member List A of Stream =
    => Item = A
    => next = fn
        | List [x .. xs] => (Just x, List xs)
        \ List [] => (None, List [])

data Take S < Stream = {
    s: S,
    n: Nat,
}

for S < Stream member Take S of Stream =
    => Item = S.Item
    => next = fn
        | self ~ Take { s, n ~ 0 } => (None, self)
        \ Take { s, n ~ n + 1 } =>
            let (x, s) = S.next(s) in
            (x, Take { s, n })

fn take S < Stream =
    \ n, s : S => Take { s, n }

data Mapped S < Stream = {
    s: S,
    f: S.Item -> S.Item,
}

for S < Stream member Mapped S of Stream =
    => Item = S.Item
    => next = fn Mapped { s, f } => match S.next(s) in
        | (Just x, s) => (Just x:f, Mapped { s, f })
        \ (None, s) => (None, Mapped { s, f })

fn mapped S < Stream =
    \ f, s : S => Mapped { s, f }

## Collect the elements of a stream into a list
fn collect S < Stream = s => match S.next(s) in
    | (Just x, s) => [x .. s:collect]
    \ (None, _) => []

fn nth S < Stream : Nat -> S -> Maybe S.Item =
    | 0, s =>
        let (x, _) = S.next(s) in x
    \ n + 1, s =>
        let (_, s) = S.next(s) in s:nth(n)
