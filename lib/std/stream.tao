#! Streams and stream combinators.
#!
#! In other languages, streams are often called 'iterators'.

import "value.tao"

class Stream =
    => Item
    => next : Self -> Maybe (Self, Self.Item)

class ToStream =
    => Stream
    => to_stream : Self -> Self.Stream

for A member [A] of ToStream =
    => Stream = [A]
    => to_stream = fn xs => xs

for A member [A] of Stream =
    => Item = A
    => next = fn
        | [] => None
        \ [x .. xs] => Just (xs, x)

data Mapped S < Stream, B = (S, S.Item -> B)

for S < Stream, B member Mapped S B of Stream =
    => Item = B
    => next = fn Mapped (s, f) => match s->S.next in
        | None => None
        \ Just (s, x) => Just (Mapped (s, f), x->f)

fn smap S, B : (S.Stream.Item -> B) -> S -> Mapped S.Stream B where
    S < ToStream,
    S.Stream < Stream,
=
    f, s => Mapped (S.to_stream(s), f)

class FromStream S < Stream =
    => from_stream : S -> Self

for A, S member [A] of FromStream S where
    S < Stream with { Item = A },
=
    => from_stream = fn s => match s->S.next in
        | None => []
        \ Just (s, x) => [x .. s->collect]

def collect A < FromStream S, S : S -> A = A.from_stream
