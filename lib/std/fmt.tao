#! Utilities for formatting and displaying data.

import "str.tao"

# Debug

class Debug =
    => debug : Self -> Str

def debug A < Debug : A -> Str = A.debug

member Bool of Debug =
    => debug = fn
        | True => "True"
        \ False => "False"

# TODO: Add this again when some form of specialisation is added
# member [Char] of Debug =
#     => debug = fn s => "\"" ++ s ++ "\""

for A < Debug member [A] of Debug =
    => debug = fn xs => "[" ++ xs -> fix(fn
        | _, [] => ""
        | rec, [x] => x -> debug
        \ rec, [x .. xs] => x -> debug ++ ", " ++ xs -> rec) ++ "]"

member Char of Debug =
    => debug = fn c => [c]

member Nat of Debug =
    => debug = fn x => @display_int(--x)

for A < Debug, B < Debug member (A, B) of Debug =
    => debug = fn (a, b) => "(" ++ A.debug(a) ++ ", " ++ B.debug(b) ++ ")"

#for A < Debug member [A] of Debug =
#    => debug = fn xs => "[" ++ xs->fold("", fn s, x => s ++ ", " ++ x->A.debug) ++ "]"

# Show

class Show =
    => show : Self -> Str

def show A < Show : A -> Str = A.show

member [Char] of Show =
    => show = fn s => s

member Nat of Show =
    => show = fn x => @display_int(--x)

member Int of Show =
    => show = fn x => @display_int(x)

member Bool of Show =
    => show = fn
        | True => "true"
        \ False => "false"

member Char of Show =
    => show = fn c => [c]
