data Maybe A =
	| Just A
	| None

data Result A, E =
	| Ok A
	| Err E

def len A : [A] -> Nat = fn
	| [] => 0
	| [_ .. tail] => 1 + tail:len

def nth A : Nat -> [A] -> Maybe A = fn
    | 0, [x ..] => Just x
    | n + 1, [_ .. tail] => tail:nth(n)
    | _, _ => None

def fold A, B : A -> (A -> B -> A) -> [B] -> A = fn
	| init, _, [] => init
	| init, f, [x .. tail] => fold(f(init, x), f, tail)

def sum : [Nat] -> Nat = fold(0, fn x, y => x + y)

# TODO: Remove when libs are supported
$[main] def main = [1, 2, 3, 4]:sum
