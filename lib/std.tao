data Maybe A =
	| Just A
	\ None

class Add =
    add : Self -> Self -> Self

class Show =
    show : Self -> Str

member Nat of Show =
    show = fn _ => "a nat"

for A < Show, B < Show member (A, B) of Show =
    show = fn (a, b) => "(" ++ A.show(a) ++ ", " ++ B.show(b) ++ ")"

data Result A, E =
	| Ok A
	\ Err E

def len A : [A] -> Nat =
	| [] => 0
	\ [_ .. tail] => 1 + tail:len

def nth A : Nat -> [A] -> Maybe A =
    | 0, [x ..] => Just x
    | n + 1, [_ .. tail] => tail:nth(n)
    \ _, _ => None

def fold A, B : A -> (A -> B -> A) -> [B] -> A =
	| init, _, [] => init
	\ init, f, [x .. tail] => fold(f(init, x), f, tail)

def sum : [Nat] -> Nat = fold(0, fn x, y => x + y)

# TODO: Remove when libs are supported
$[main] def main = [1, 2, 3, 4]:sum

type Str = [Char]
