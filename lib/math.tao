type Str = [Char]

class Zero =
    zero : Self

class One =
    one : Self

class Add =
    add: Self -> Self -> Self

class Mul =
    mul: Self -> Self -> Self

class Ring < Zero + One + Add + Mul

for A < Zero + One + Add + Mul member A of Ring

def needs_ring A < Ring =
    \ x : A => x
def bar = needs_ring(5)

member Nat of Zero =
    zero = 0

member Nat of One =
    one = 1

member Nat of Add =
    add = fn x, y => x + y

member Nat of Mul =
    mul = fn x, y => x * y

class Sum < Zero + Add

def sum A < Sum =
    | [] => A.zero
    \ [x .. xs] => A.add(x, xs:sum)

# member Nat of Sum
for A < Zero + Add member A of Sum

def foo = [1, 2, 3, 4]:sum

# class Add =
#     add : Self -> Self -> Self

# member Nat of Add =
#     add = fn x, y => x + y

# def sum A < Add + Zero =
#     | []: [A] => A.zero
#     \ [x .. xs] => A.add(x, xs:sum)

# # $[main]
# def main = [1, 2, 3, 4]:sum

class Show =
    show : Self -> Str

def show T < Show : T -> Str =
    \ x => x:T.show

member Nat of Show =
    show = fn _ => "a nat"

for A < Show, B < Show member (A, B) of Show =
    show = fn (a, b) => "(" ++ a:A.show ++ ", " ++ b:B.show ++ ")"

$[main]
def test = ((1, 2), ((3, 4), 5)):show
