#! Operator definitions.

# Not

$[lang(not)]
class Not =
    => Output
    => not : Self -> Self.Output

member Bool of Not =
    => Output = Self
    => not = fn
        | True => False
        \ False => True

for A < Not member [A] of Not =
    => Output = [A.Output]
    => not = fn
        | [] => []
        \ [x .. xs] => [!x .. !xs]

# Not

$[lang(neg)]
class Neg where =
    => Output
    => neg : Self -> Self.Output

member Nat of Neg =
    => Output = Int
    => neg = fn x => @neg_nat(x)

member Int of Neg =
    => Output = Int
    => neg = fn x => @neg_int(x)

member Real of Neg =
    => Output = Real
    => neg = fn x => @neg_real(x)

for A < Neg member [A] of Neg =
    => Output = [A.Output]
    => neg = fn
        | [] => []
        \ [x .. xs] => [-x .. -xs]

# Add

class Add =
    => add: Self -> Self -> Self

member Nat of Add =
    => add = fn x, y => x + y

# Mul

class Mul =
    => mul: Self -> Self -> Self

member Nat of Mul =
    => mul = fn x, y => x * y

# Eq

$[lang(eq)]
class Eq =
    => eq : Self -> Self -> Bool

member Nat of Eq =
    => eq = fn x, y => @eq_nat(x, y)

member Char of Eq =
    => eq = fn x, y => @eq_char(x, y)

for A < Eq member [A] of Eq =
    => eq = fn
        | [], [] => True
        | [x .. xs], [y .. ys] => x = y and xs = ys
        \ _, _ => False

for A < Eq member [A] of Eq =
    => eq = fn
        | [], [] => True
        | [x .. xs], [y .. ys] => x:eq(y) and xs:eq(ys)
        \ _, _ => False

fn eq A < Eq : A -> A -> Bool = x, y => A.eq(x, y)

# Ord

class Ord < Eq =
    => cmp : Self -> Self -> Ordering

data Ordering =
    | Less
    | Greater
    \ Equal

member Nat of Ord =
    => cmp = fn x, y => if x < y
        then Less
        else if x > y
        then Greater
        else Equal

class OrdExt < Ord =
    => less : Self -> Self -> Bool
    => less_eq : Self -> Self -> Bool
    => greater : Self -> Self -> Bool
    => greater_eq : Self -> Self -> Bool

for A < Ord member A of OrdExt =
    => less = fn x, y => match A.cmp(x, y) in
        | Less => True
        \ _ => False
    => less_eq = fn x, y => match A.cmp(x, y) in
        | Greater => False
        \ _ => True
    => greater = fn x, y => match A.cmp(x, y) in
        | Greater => True
        \ _ => False
    => greater_eq = fn x, y => match A.cmp(x, y) in
        | Less => False
        \ _ => True
