import "../lib/std.tao"

# Natural numbers

data Zero
data Succ A

type One = Succ Zero
type Two = Succ One
type Three = Succ Two
type Four = Succ Three
type Five = Succ Four
type Six = Succ Five
type Seven = Succ Six
type Eight = Succ Seven
type Nine = Succ Eight
type Ten = Succ Nine

# Utility that allows us to print the result of operations

class Number =
    => as_nat : Nat

member Zero of Number =
    => as_nat = 0

for A < Number member Succ A of Number =
    => as_nat = A.as_nat + 1

# Addition

class TAdd B =
    => Result

for B member Zero of TAdd B =
    => Result = B

for A < TAdd B, B member Succ A of TAdd B =
    => Result = Succ A.Result

# Multiplication

class TMul B =
    => Result

for B member Zero of TMul B =
    => Result = Zero

for A, B member Succ A of TMul B where
    A < TMul B,
    A.Result < TAdd B,
=
    => Result = A.Result.Result

fn f A < TMul Zero : A -> () =
    _ => ()

def x = f(Zero)

# Truthiness

data TTrue
data TFalse

class Truthy =
    => as_bool : Bool

member TTrue of Truthy =
    => as_bool = True

member TFalse of Truthy =
    => as_bool = False

class If A, B =
    => Result

for A, B member TTrue of If (A) B =
    => Result = A

for A, B member TFalse of If (A) B =
    => Result = B

# Demo
def main =
    <TTrue.<If
        TTrue.<If
            Six.<TMul Seven>.Result
            Ten.<TMul Four>.Result
        >.Result
        TFalse.<If
            Three.<TMul Two>.Result
            Nine.<TMul Nine>.Result
        >.Result
    >.Result>.as_nat
