# Assist in defining recursive functions
let rec = f ->
    f:f
in

# Find the nth element in a list
let nth = rec(nth -> n -> l ->
    if n < 1
    then <: l
    else nth(nth, n - 1, :> l)
) in

# Find the first element in a list
let head = x -> <: x in

# Find all but the first element in a list
let tail = x -> :> x in

# Get the transition function of an iterator
let trans = iter -> <: iter in

# Get the body payload of an iterator
let body = iter -> <: :> iter in

# Get the next item from iterator and the new iterator state
let next = iter ->
	let succ = iter:body:(iter:trans) in
	[succ:head, [iter:trans, succ:body]]
in

# Create an iterator that produces a range of numbers
let range = a -> b ->
	[
		old -> [
			if old:nth(0) < old:nth(1)
			then old:nth(0)
			else null,
			[old:nth(0) + 1, old:nth(1)]
		],
		[a, b]
	]
in

# Map an iterator using the given function
let map = f -> iter ->
	let t = iter:trans in
	let b = iter:body in
	[
		child ->
			let n = child:next in
			[if n:head = null then null else n:head:f, n:nth(1)],
		iter
	]
in

# Collect an iterator into a list
let collect = rec(collect -> iter ->
	let succ = iter:next in
	if succ:head = null
	then []
	else [succ:head] ++ succ:nth(1):collect(collect)
) in

range(0, 10)
	:map(x -> x - 5)
	:map(x -> x * x)
	:collect
