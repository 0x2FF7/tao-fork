# Assist in defining recursive functions
# Find the nth element in a list
def nth = n -> l ->
    if n < 1
    then <: l
    else nth(n - 1, :> l)

# Find the first element in a list
def head = x -> <: x

# Find all but the first element in a list
def tail = x -> :> x

# Get the transition function of an iterator
def trans = iter -> <: iter

# Get the body payload of an iterator
def body = iter -> <: :> iter

# Get the next item from iterator and the new iterator state
def next = iter ->
	let succ = iter:body:(iter:trans) in
	(succ:head, (iter:trans, succ:body))

# Create an iterator that produces a range of numbers
def range = a -> b ->
	(
		old -> (
			if old:nth(0) < old:nth(1)
			then [old:nth(0)]
			else [],
			[old:nth(0) + 1, old:nth(1)]
		),
		[a, b],
	)

# Map an iterator using the given function
def map = f -> iter ->
	let t = iter:trans in
	let b = iter:body in
	(
		child ->
			let n = child:next in
			(if n:head = [] then [] else [n:head:head:f], n:nth(1)),
		iter,
	)

# Collect an iterator into a list
def collect = iter ->
	let succ = iter:next in
	if succ:head = []
	then []
	else [succ:head:head] ++ succ:nth(1):collect

def main = range(0, 10)
	:map(x -> x - 5)
	:map(x -> x * x)
	:collect
