import "lib/std.tao"

class Mappable B =
    => Item
    => Output
    => map : (Self.Item -> B) -> Self -> Self.Output

for A, B member [A] of Mappable B =
    => Item = A
    => Output = [B]
    => map = fn f, self => self:map(f)

def do_map A < Mappable =
    \ f, m => A.map(f, m)

$[main]
def main = [1, 2, 3, 4]:do_map(fn x => x * x)

class Foo =
    => Bar
    => foo : Self.Bar

member Nat of Foo =
    => Bar = Bool
    => foo = True

def foo_nat : Nat.Bar = Nat.foo

# class Neg =
#     => Output
#     => neg : Self -> Self.Output

# def neg A < Neg : A -> A.Output = A.neg

# $[main]
# def main = [
#         (4, "e"),
#         (2, "c"),
#         (0, "a"),
#         (3, "d"),
#         (1, "b"),
#     ]
#         :from_list
#         :contains(4)
#         :debug

# def main2 = do
#     let msg = input;
#     if msg = "exit" then do
#         print("Now exiting...");
#         print("Goodbye!");
#     else do
#         print("Hello, world!");
#         main2; # Loop
