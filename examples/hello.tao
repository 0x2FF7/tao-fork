import "lib/std.tao"

data Value =
    | String Str
    | Integer Int
    \ Pair (Value, Value)

def give_me_a : Str -> Value =
    | "string" => String "Hello"
    | "integer" => Integer 42
    | "pair" => Pair (String "left", String "right")
    \ _ => Pair (Integer 0, Integer 0)

type NatOrBool = (Nat | Bool)

def nat_or_bool : Bool -> (Nat | Bool) =
    | True => ?5
    \ False => ?True

def match_nat_or_bool =
    match nat_or_bool(True) in
    | ?x : Nat => ()
    \ ?y : Bool => ()

# def nat : (Nat|) = nat_or_bool(True)

def takes_union_or_nat : (Nat | Bool) -> (Nat | Bool) =
    \ x => ?True

def f : (Nat | Bool) -> (Nat | Bool) = takes_union_or_nat

def nat_or_bool2 : Bool -> (Bool | Nat) =
    | True => ?(let x : Nat = 5 in x)
    | True => ?False
    | True => ?True
    \ False => let x = ?nat_or_bool(False) in
        x

def foo =
    let x = nat_or_bool(True) in
    let y = match True in
        | True => ?x
        \ False => ?()
    in
    y

# def nat_or_bool = 5?

# def foo = match True in
#     | True => nat_or_bool
#     | False => nat_or_bool

$[main]
def main = match nat_or_bool2(False) in
    \ x => x

def and_then A, B, E, D : (A -> Result B D) -> Result A E -> Result B (E | D) =
    | _, Err e => Err ?e
    \ f, Ok ok => match ok:f in
        | Err e => Err ?e
        \ Ok ok => Ok ok

data TooSmall
data TooBig

def more_than_5 : Nat -> Result Nat TooSmall =
    \ x => if x > 5
        then Ok x
        else Err TooSmall

def less_than_10 : Nat -> Result Nat TooBig =
    \ x => if x < 10
        then Ok x
        else Err TooBig

def between_5_and_10 : Nat -> Result Nat (TooSmall | TooBig) =
    \ x => x:more_than_5
        :and_then(less_than_10)

# $[main]
# def main = [1, 2, 3, 4, 5, 6]
#     :stream
#     :take(5)
#     :mapped(fn x => x * x)
#     :nth(3)

class Mappable =
    => Item
    => Output
    => map : (Self.Item -> Self.Item) -> Self -> Self.Output

for A member [A] of Mappable =
    => Item = A
    => Output = [A]
    => map = fn f, self => self:map(f)

def do_map A < Mappable =
    \ f, m => A.map(f, m)

class Foo =
    => Bar
    => foo : Self.Bar

member Nat of Foo =
    => Bar = Bool
    => foo = True

def foo_nat : Nat.Bar = Nat.foo

class Neg =
    => Output
    => neg : Self -> Self.Output

def neg A < Neg : A -> A.Output = A.neg

# $[main]
# def main = [
#         (4, "e"),
#         (2, "c"),
#         (0, "a"),
#         (3, "d"),
#         (1, "b"),
#     ]
#         :from_list
#         :contains(4)
#         :debug

# def main2 = do
#     let msg = input;
#     if msg = "exit" then do
#         print("Now exiting...");
#         print("Goodbye!");
#     else do
#         print("Hello, world!");
#         main2; # Loop
