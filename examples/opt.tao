import "lib/core.tao"

fn factorial_go = n => go(
    fn
        | (0, a) => Done a
        \ (m ~ n + 1, a) => Next (n, m * a)
    ,
    (n, 1),
)

fn factorial =
    | 0 => 1
    \ m ~ n + 1 => m * factorial(n)

data Result A, E =
    | Ok A
    \ Err E

$[main]
def main : Result Never Never -> Nat = #factorial_go(10)
    fn x : Result Never Never => match x in |
        # | Ok x => Err x
        # \ Err _ => Ok 5

data Maybe A =
    | Just A
    \ None

data Never =|

fn foo = x : Maybe Never =>
    match ?x in
        | ? Just x : Maybe Nat => ()
        | ? None : Maybe Never => ()
        \ ? None : Maybe Nat => ()


