import "lib/std.tao"

fn factorial_go = n => go(
    fn
        | (0, a) => Done a
        \ (m ~ n + 1, a) => Next (n, m * a)
    ,
    (n, 1),
)

fn factorial =
    | 0 => 1
    \ m ~ n + 1 => m * factorial(n)

def factorial_fix = fix(fn
    | rec, 0 => 1
    \ rec, m ~ n + 1 => m * rec(n))

class Factorial =
    => factorial : Nat -> Nat

member () of Factorial =
    => factorial = fn
        | 0 => 1
        \ m ~ n + 1 => m * Self.factorial(n)

def main = <()>.factorial(10)#factorial_go(10)
