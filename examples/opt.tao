import "lib/std.tao"

fn factorial_go = n => go(
    fn
        | (0, a) => Done a
        \ (m ~ n + 1, a) => Next (n, m * a)
    ,
    (n, 1),
)

fn factorial =
    | 0 => 1
    \ m ~ n + 1 => m * factorial(n)

def factorial_fix = fix(fn
    | rec, 0 => 1
    \ rec, m ~ n + 1 => m * rec(n))

data Foo = { x: Nat, y: Bool }

$[main]
def main = (Foo {y: True, x: 1}) with {y:False}#factorial_go(10)

data Never =|
