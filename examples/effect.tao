import "../lib/std.tao"

fn yield A : A -> yield A ~ () =
    x => @{ @suspend(x) }
fn do_print : Str -> print ~ () =
    s => @{ @suspend(s) }

effect yield A = A => ()

effect print = Str => ()

# Counts the natural numbers, yielding each one to the caller
fn count_from : Nat -> yield Nat ~ () =
    n => @{
        yield(n)?;
        count_from(n + 1)?;
    }

# Prints the natural numbers to the console
def print_nats : print ~ () = @{
    count_from(0)
        handle yield Nat with n => do_print(""#(n:show)#)?
}

effect get_name = () => Str

# This will be implicit later
def get_name : get_name ~ Str = @{ @suspend(()) }

def hello : get_name ~ Str = @{
    let name = get_name? in
    "Hello, " ++ name ++ "!"
}

fn hello_to : Str -> Str =
    name => hello
        handle get_name with () => name

def hello_to_you = hello_to("you")

# def eff_main = do {
#     print("Hello, world!")?;
# }

# fn handle_effects : print + input ~ () -> @ -> @ = eff, uni =>
#     with uni
#     on eff
#         handle print in uni, eff, s =>
#             let uni = @print(uni, s) in
#             (uni, @resume(~print, eff, ()))
#         handle input in uni, eff, () =>
#             let (uni, s) = @input(uni) in
#             (uni, @resume(~input, eff, s))
#     until uni, () => uni

# def main : @ -> @ =
#     handle_effects(eff_main)

def main = print(hello_to_you)
