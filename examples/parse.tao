# General utility

data Maybe A =
	| Just A
	| Nil

def contains = |cs of [Char], c of Char| match cs {
	[c1, cs: ...] => c1 = c or contains(cs, c),
	_ => false,
}

def len A of [A] -> ? = |xs| match xs {
	[_, xs: ...] => 1 + xs:len,
	_ => 0,
}

def fold_l A B of ? -> (B -> A -> B) -> ? -> ? = |init, f, xs| match xs {
	[x, xs: ...] => fold_l(f(init, x), f, xs),
	_ => init,
}

def reduce_l A B = |f, (init, xs) of (A, [B])| fold_l(init, f, xs)

def fold_r A B of ? -> (A -> B -> B) -> ? -> ? = |init, f, xs| match xs {
	[x, xs: ...] => f(x, fold_r(init, f, xs)),
	_ => init,
}

def reduce_r A B = |f, (xs, init) of ([B], A)| fold_r(init, f, xs)

def sum = fold_l(0, |a, x| a + x)

def find_char_inner = |x, cs, c of Char| match cs {
	[c1, cs: ...] => if c1 = c
		then [x]
		else find_char_inner(x + 1, cs, c),
	_ => [],
}

def find_char = find_char_inner(0)

# Parser Things

data Out I O = {
	rest: [I],
	out: Maybe O,
}

def success I O = |rest of [I], out of O| $Out { rest, out: $Just out }
def failure I O of ? -> Out ? O = |rest of [I]| $Out { rest, out: $Nil }

type Parser I O = [I] -> Out I O

def matcher I of (I -> Bool) -> Parser I I = |f, input| match input {
	[i, rest: ...] => if i:f
		then success(rest, i)
		else failure(input),
	_ => failure([]),
}

def recurse I O of ([I] -> Out I O) -> Parser I O = |f, input| match input:f {
	$Out { rest, out: $Just o } => success(rest, o),
	_ => failure(input),
}

def end I of Parser I () = |input| match input {
	[] => success([], ()),
	_ => failure([]),
}

def map I O U of (O -> U) -> Parser I O -> Parser I U = |f, p, input|
	let $Out { rest, out } = input:p in
	match out {
		$Just o => success(rest, f(o)),
		_ => failure(rest),
	}

def repeated I O of Parser I O -> Parser I [O] = |p, input| match input:p {
	$Out { rest, out: $Just o } =>
		let $Out { rest, out } = rest:repeated(p) in
		match out {
			$Just out => success(rest, [o] ++ out),
			_ => failure(rest),
		},
	$Out { rest, out } => success(rest, []),
}

def repeated_at_least I O of Num -> Parser I O -> Parser I [O] = |n, p, input|
	let r = input:repeated(p) in
	let $Out { rest, out } = r in
	match out {
		$Just xs => if xs:len >= n
			then r
			else failure(rest),
		_ => failure(rest),
	}

def and_then I O U of Parser I U -> Parser I O -> Parser I (O, U) = |p1, p0, input|
	let $Out { rest, out } = input:p0 in
	match out {
		$Just o => rest:map(|u| (o, u), p1),
		_ => failure(rest),
	}

def or_else I O of Parser I O -> Parser I O -> Parser I O = |p1, p0, input|
	let $Out { rest, out } = input:p0 in
	match out {
		$Just o => success(rest, o),
		_ => let $Out { rest, out } = input:p1 in
		match out {
			$Just o => success(rest, o),
			_ => failure(rest),
		},
	}

def is_success I O = |p of Parser I O, input| match input:p {
	$Out { rest, out: $Just _ } => true,
	_ => false,
}

def char_to_num = |c| match find_char("0123456789", c) {
	[i] => i,
	_ => 0,
}

def padded_by I O U = |p1 of Parser I O, p0 of Parser I U| p0
	:and_then(p1)
	:map(|(a, _)| a)

def padding_for I O U = |p1 of Parser I O, p0 of Parser I U| p0
	:and_then(p1)
	:map(|(_, b)| b)

def whitespace = matcher(|c| contains(" \t\n", c))

def padded O of Parser Char O -> Parser Char O = |p| p
	:padded_by(whitespace:repeated)

def char = |c of Char| matcher(|i| c = i)

def op = |c| char(c):padded

def digit = matcher(|c| contains("1234567890", c))
	:map(char_to_num)

def number = digit
	:repeated_at_least(1)
	:map(|xs| xs:fold_l(0, |a, x| a * 10 + x))
	:padded

def atom = number
	:or_else(char('(')
		:padding_for(recurse(|input| input:expr))
		:padded_by(char(')')))

def unary = op('-')
	:repeated
	:and_then(atom)
	:map(reduce_r(|op, x| match op {
		'-' => -x,
		_ => x,
	}))

def product = unary
	:and_then(op('*')
		:or_else(op('/'))
		:or_else(op('%'))
		:and_then(unary)
		:repeated)
	:map(reduce_l(|a, (op, b)| match op {
		'*' => a * b,
		'/' => a / b,
		'%' => a % b,
		_ => a,
	}))

def sum = product
	:and_then(op('+')
		:or_else(op('-'))
		:and_then(product)
		:repeated)
	:map(reduce_l(|a, (op, b)| match op {
		'+' => a + b,
		'-' => a - b,
		_ => a,
	}))

def expr = sum

def full_expr = expr:padded_by(end)

def main = "4 + (5 - 3)":full_expr
