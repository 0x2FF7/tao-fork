# General utility

data Maybe A =
	| Just A
	| Nil

def contains = |cs of [Char], c of Char| match cs {
	| [c1, cs: ...] => c1 = c or contains(cs, c)
	| [] => false
}

def len A of [A] -> ? = |xs| match xs {
	| [_, xs: ...] => 1 + xs:len
	| [] => 0
}

def fold_l A B of ? -> (B -> A -> B) -> ? -> ? = |init, f, xs| match xs {
	| [x, xs: ...] => fold_l(f(init, x), f, xs)
	| [] => init
}

def reduce_l A B = |f, (init, xs) of (A, [B])| fold_l(init, f, xs)

def fold_r A B of ? -> (A -> B -> B) -> ? -> ? = |init, f, xs| match xs {
	| [x, xs: ...] => f(x, fold_r(init, f, xs))
	| [] => init
}

def reduce_r A B = |f, (xs, init) of ([B], A)| fold_r(init, f, xs)

def sum = fold_l(0, |a, x| a + x)

def find_char_inner = |x, cs, c of Char| match cs {
	| [c1, cs: ...] => if c1 = c
		then Just x
		else find_char_inner(x + 1, cs, c)
	| [] => $Nil
}

def find_char = find_char_inner(0)

# Parser Things

data Out I O = {
	rest: [I],
	out: Maybe O,
}

def success I O = |rest of [I], out of O| $Out { rest, out: $Just out }
def failure I O of ? -> Out ? O = |rest of [I]| Out { rest, out: $Nil }

type Parser I O = [I] -> Out I O

def matcher I O of (I -> Maybe O) -> Parser I O = |f, input| match input {
	| [i, rest: ...] => match i:f {
		| Just o => success(rest, o)
		| Nil => failure(input)
	}
	| [] => failure([])
}

def recurse I O of ([I] -> Out I O) -> Parser I O = |f, input| match input:f {
	| Out { rest, out: Just o } => success(rest, o)
	| _ => failure(input)
}

def end I of Parser I () = |input| match input {
	| [] => success([], ())
	| _ => failure([])
}

def map I O U of (O -> U) -> Parser I O -> Parser I U = |f, p, input|
	let r = input:p in
	match r.out {
		| Just o => success(r.rest, f(o))
		| _ => failure(r.rest)
	}

def repeated I O of Parser I O -> Parser I [O] = |p, input| match input:p {
	| Out { rest, out: Just o } =>
		let r = rest:repeated(p) in
		match r.out {
			| Just out => success(r.rest, [o] ++ out)
			| Nil => failure(r.rest)
		}
	| Out { rest, out } => success(rest, [])
}

def repeated_at_least I O of Num -> Parser I O -> Parser I [O] = |n, p, input|
	let r = input:repeated(p) in
	match r.out {
		| Just xs => if xs:len >= n
			then r
			else failure(r.rest)
		| Nil => failure(r.rest)
	}

def and_then I O U of Parser I U -> Parser I O -> Parser I (O, U) = |p1, p0, input|
	let r = input:p0 in
	match r.out {
		| Just o => r.rest:map(|u| (o, u), p1)
		| Nil => failure(r.rest)
	}

def or_else I O of Parser I O -> Parser I O -> Parser I O = |p1, p0, input|
	let r = input:p0 in
	match r.out {
		| Just o => success(r.rest, o)
		| Nil => let r = input:p1 in
			match r.out {
				| Just o => success(r.rest, o)
				| Nil => failure(r.rest)
			}
	}

def is_success I O = |p of Parser I O, input| match input:p {
	| Out { rest, out: Just _ } => true
	| _ => false
}

def char_to_num = find_char("0123456789")

def padded_by I O U = |p1 of Parser I O, p0 of Parser I U| p0
	:and_then(p1)
	:map(|(a, _)| a)

def padding_for I O U = |p1 of Parser I O, p0 of Parser I U| p0
	:and_then(p1)
	:map(|(_, b)| b)

# AST

data UnaryOp =
	| Neg

data BinaryOp =
	| Add | Sub
	| Mul | Div | Rem

data Expr =
	| Number Num
	| Unary (UnaryOp, Expr)
	| Binary (BinaryOp, Expr, Expr)

# Parser

def whitespace = matcher(find_char(" \t\n"))

def padded O of Parser Char O -> Parser Char O = |p| p
	:padded_by(whitespace:repeated)

def char = |c of Char| matcher(|i| if c = i
	then $Just i
	else $Nil)

def op = |c| char(c):padded

def digit = matcher(|c| char_to_num(c))

def number = digit
	:repeated_at_least(1)
	:map(|xs| xs:fold_l(0, |a, x| a * 10 + x))
	:padded

def atom = number
	:map(|x| $Number x)
	:or_else(char('(')
		:padding_for(recurse(|input| input:expr))
		:padded_by(char(')')))

def unary = op('-'):map(|_| Neg)
	:repeated
	:and_then(atom)
	:map(reduce_r(|op, a| Unary (op, a)))

def product = unary
	:and_then(op('*'):map(|_| Mul)
		:or_else(op('/'):map(|_| Div))
		:or_else(op('%'):map(|_| Rem))
		:and_then(unary)
		:repeated)
	:map(reduce_l(|a, (op, b)| Binary (op, a, b)))

def sum = product
	:and_then(op('+'):map(|_| Add)
		:or_else(op('-'):map(|_| Sub))
		:and_then(product)
		:repeated)
	:map(reduce_l(|a, (op, b)| Binary (op, a, b)))

def expr = sum

def full_expr = expr:padded_by(end)

# Interpreter

def eval = |ast| match ast {
	| Number x => x
	| Unary (op, a) => match op {
		| Neg => -a:eval
	}
	| Binary (op, a, b) => match op {
		| Add => a:eval + b:eval
		| Sub => a:eval - b:eval
		| Mul => a:eval * b:eval
		| Div => a:eval / b:eval
		| Rem => a:eval % b:eval
	}
}

def main = match full_expr("4 + (5 - 3)").out {
	| Just ast => ast:eval
	| Nil => 0
}
