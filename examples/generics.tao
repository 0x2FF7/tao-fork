given A data Cons =
    | Item (A, Cons A)
    | Nil

given A def empty of [A] = []

given A def len = l of [A] ->
	match l in
	| [] => 0
	| [_, ...] => 1 + l:tail:len

def print of msg -> @ -> @ =
	@ <-print-> msg # Builtin operator

def main =
	range(0, 10)
		:map(x -> x + 5)
		:fold(x -> print("x = " + x)) # fold has type F -> A -> A
