import "../lib/std.tao"

data Value =
    | String Str
    | Integer Int
    \ Pair (Value, Value)

fn give_me_a : Str -> Value =
    | "string" => String "Hello"
    | "integer" => Integer 42i
    | "pair" => Pair (String "left", String "right")
    \ _ => Pair (Integer 0i, Integer 0i)

fn factorial =
    | 0 => 1
    \ m ~ n + 1 => m * factorial(n)

def main3 =
    let x = 5 in
    let f = fn y => x + y in
    f(4)

# fn main = [1, 2, 3, 4, 5, 6]
#     :stream
#     :take(5)
#     :mapped(fn x => x * x)
#     :nth(3)

class Mappable =
    => Item
    => Output
    => map : (Self.Item -> Self.Item) -> Self -> Self.Output

for A member [A] of Mappable =
    => Item = A
    => Output = [A]
    => map = fn f, self => self:map(f)

fn do_map A < Mappable =
    \ f, m => A.map(f, m)

class Foo =
    => Bar
    => foo : Self.Bar

member Nat of Foo =
    => Bar = Bool
    => foo = True

def foo_nat : Nat.Bar = Nat.foo

def main = [
        (4, "e"),
        (2, "c"),
        (0, "a"),
        (3, "d"),
        (1, "b"),
    ]
        :from_list
        :contains(4)
        :debug
