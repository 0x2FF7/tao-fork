data Maybe A =
	| Just A
	| Nil

data Instr =
	| Left
	| Right
	| Incr
	| Decr
	| Out
	| In
	| Loop [Instr]

def ascii = "          \n                      !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

fn filled A |n, val of A| if n <= 0
	then []
	else [val] ++ filled(n - 1, val)

fn apply A |idx, f, xs of [A]| match (idx, xs) {
	| (0, [x, xs: ...]) => [x:f] ++ xs
	| (n, [x, xs: ...]) => [x] ++ xs:apply(n - 1, f)
	| _ => xs
}

fn nth A |idx, xs of [A]| match (idx, xs) {
	| (0, [x, ...]) => Just x
	| (n, [_, xs: ...]) => xs:nth(n - 1)
	| _ => Nil
}

data Continue A B =
	| Go A
	| Done B

fn loop A B of ? -> ? -> B |f, init of A| match init:f {
	| Go x => loop(f, x)
	| Done x => x
}

fn parse_instr |s| match s {
	| ['<', s: ...] => (Just Left, s)
	| ['>', s: ...] => (Just Right, s)
	| ['+', s: ...] => (Just Incr, s)
	| ['-', s: ...] => (Just Decr, s)
	| ['.', s: ...] => (Just Out, s)
	| [',', s: ...] => (Just In, s)
	| ['[', s: ...] =>
		let (body, s) = s:parse_body in
		(Just Loop body, s)
	| _ => (Nil, s)
}

fn parse_body |s| match s {
	| [']', s: ...] => ([], s)
	| _ => match s:parse_instr {
		| (Just instr, s) =>
			let (body, s) = s:parse_body in
			([instr] ++ body, s)
		| (_, s) => ([], s)
	}
}

data State = {
	ptr: Num,
	tape: [Num],
	output: [Char],
}

fn exec_inner |body, state of State| match body {
	| [instr, body: ...] =>
		let state = match instr {
		| Left => state with { ptr: ptr - 1 }
		| Right => state with { ptr: ptr + 1 }
		| Incr => state with { tape: tape:apply(state.ptr, |x| (x + 1) % 256) }
		| Decr => state with { tape: tape:apply(state.ptr, |x| (x + 255) % 256) }
		| Out => state with { output: match state.tape:nth(state.ptr) {
			| Just x => match ascii:nth(x) {
				| Just c => output ++ [c]
				| Nil => output
			}
			| Nil => output
		} }
		| In => state with { tape: tape:apply(state.ptr, |_| 0) }
		| Loop body => loop(|state| match state.tape:nth(state.ptr) {
			| Just 0 => Done state
			| _ => Go exec_inner(body, state)
		}, state)
	} in exec_inner(body, state)
	| [] => state
}

fn exec |body| exec_inner(
	body,
	State {
		ptr: 0,
		tape: filled(1000, 0),
		output: [],
	},
).output

fn run |s| let (body, _) = s:parse_body in body:exec

def main = "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.":run
