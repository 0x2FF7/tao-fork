given A type Succ = (A, ())

type Zero = Succ ()
type One = Succ Zero
type Two = Succ One
type Three = Succ Two
type Four = Succ Three

#def foo = |x of Four, y of Succ (Succ (Succ (Succ Zero)))|
#	# Hacky equivalence check
#	[x] ++ [y]

type Universe = ()

given A type IO = Universe -> (A, Universe)

#given A def bad_rec of ? -> Num = |x of Succ A| bad_rec(())

given A def invent of A = invent

def loop0 of Bool -> Num = loop1

def loop1 = loop0

def factorial = |x| match x in
	| 0 => 1
	| _ => x * factorial(x - 1)

given A, B def first = |(a, b) of (A, B)| a

given A def identity = |xs of [A]| match xs in
	| [head, ...tail] => (match tail in
		| [head2, ...tail] => [head, head2] ++ tail
		| [] => [head])
	| [] => []

given A def len = |xs of [A]| match xs in
	| [] => 0
	| [_, ...tail] => 1 + tail:len

def factorial = |x| if x = 0
	then 1
	else x * factorial(x - 1)

def main = factorial(10)
