type Succ A = (A, ())

type Zero = Succ ()
type One = Succ Zero
type Two = Succ One
type Three = Succ Two
type Four = Succ Three

#def foo = |x of Four, y of Succ (Succ (Succ (Succ Zero)))|
#	# Hacky equivalence check
#	[x] ++ [y]

type Universe = ()

type IO A = Universe -> (A, Universe)

#def bad_rec A of ? -> Num = |x of Succ A| bad_rec(())

def invent A of A = invent

def loop0 of Bool -> Num = loop1

def loop1 = loop0

def factorial = |x| match x in
	| 0 => 1
	| _ => x * factorial(x - 1)

def first A, B = |(a, b) of (A, B)| a

def list_identity A = |xs of [A]| match xs in
	| [head, ...tail] => (match tail in
		| [head2, ...tail] => [head, head2] ++ tail
		| [] => [head])
	| [] => []

def len A = |xs of [A]| match xs in
	| [] => 0
	| [_, ...tail] => 1 + tail:len

def factorial = |x| if x = 0
	then 1
	else x * factorial(x - 1)

def main = factorial(10)
