import "lib/std.tao"

data Natural =
    | Zero
    \ Succ Natural

member Natural of Eq =
    => eq = fn
        | Zero, Zero => True
        | Succ x, Succ y => x = y
        \ _, _ => False

fn show_negative A : A -> Str where
    A < Neg,
    A.Output < Neg,
    A.Output.Output < Neg,
    A.Output.Output.Output < Neg,
    A.Output.Output.Output.Output < Show,
=
    a => (----a):show

def main = show_negative(5i)

def main2 = do_add(4, 5)

class Add2 Rhs =
    => Output
    => add : Self -> Rhs -> Self.Output

member Nat of Add2 Nat =
    => Output = Nat
    => add = fn x, y => x + y

fn do_add A < Add2 B, B : A -> B -> A.Output =
    a, b => A.add(a, b)

# def main : IO () =
#     print("hello")
