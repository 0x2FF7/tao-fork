import "lib/std.tao"

data Natural =
    | Zero
    \ Succ Natural

member Natural of Eq =
    => eq = fn
        | Zero, Zero => True
        | Succ x, Succ y => x = y
        \ _, _ => False
    => ne = fn x, y => !Self.eq(x, y)

fn show_negative A : A -> Str where
    A < Neg,
    A.Output < Neg,
    A.Output.Output < Neg,
    A.Output.Output.Output < Neg,
    A.Output.Output.Output.Output < Show,
=
    a => (----a):show

def main = [1, 2, 3, 4]
    :map(fn x => x + 3)
    :map(fn x => x + x)
    :map(fn x => x * x)
    :rev
    :sort
    :sum

data Out A, F = A
fn map2 F < FnZero A with { O = B }, A, B : [A] -> [Out B F] =
    | [] => []
    \ [x .. xs] => [Out F.call(x) .. xs:map2]
data Double
for A < Add A with { Output = A } member Double of FnZero A =
    => O = A
    => call = fn x => x + x
def forced_monomorphisation : [Out Nat Double] = [1, 2, 3, 4]:map2

class VecData A =
    => Proj

data Three

for A member Three of VecData A =
    => Proj = { x : A, y : A, z : A }

data Vec A, N < VecData A = N.Proj

def v3 : Vec Nat Three = Vec {
    x : 4,
    y : 5,
    z : 6,
}

# def main : IO () =
#     print("hello")
