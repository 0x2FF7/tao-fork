def magic of Num = magic

# Problem 1

def last = |xs of [Num]| match xs in
| [] => magic
| [last] => last
| [_, ...tail] => tail:last

# Problem 2

def last_but_one = |xs of [Num]| match xs in
| [last_but_one, _] => last_but_one
| [_, ...tail] => tail:last_but_one
| _ => magic

# Problem 3

def kth = |k, xs of [Num]| match (k, xs) in
| (0, [head, ...]) => head
| (k, [_, ...tail]) => tail:kth(k - 1)
| _ => magic

# Problem 4

def len = |xs of [Num]| match xs in
| [] => 0
| [_, ...tail] => 1 + tail:len

# Problem 5

def rev = |xs of [Num]| match xs in
| [] => []
| [head, ...tail] => tail:rev ++ [head]

# Problem 6

def is_eq = |xs of [Num], ys| match (xs, ys) in
| ([], []) => true
| ([a, ...as], [b, ...bs]) => a = b and is_eq(as, bs)
| _ => false

def is_palindrome = |xs of [Num]| is_eq(xs, xs:rev)

def main = [5, 2, 7, 9, 4, 9, 7, 2, 5]:is_palindrome
