def magic A of A = magic

data Maybe A =
	| Just A
	| Nil

# Problem 1

def last = |xs of [Num]| match xs {
	| [] => magic
	| [last] => last
	| [_, tail: ...] => tail:last
}

# Problem 2

def last_but_one = |xs of [Num]| match xs {
	| [last_but_one, _] => last_but_one
	| [_, tail: ...] => tail:last_but_one
}

# Problem 3

def kth = |k, xs of [Num]| match (k, xs) {
	| (0, [head, ...]) => $Just head
	| (k, [_, tail: ...]) => tail:kth(k - 1)
	| _ => $Nil
}

# Problem 4

def len A of [A] -> ? = |xs| match xs {
	| [] => 0
	| [_, tail: ...] => 1 + tail:len
}

# Problem 5

def rev = |xs of [Num]| match xs {
	| [] => []
	| [head, tail: ...] => tail:rev ++ [head]
}

# Problem 6

def is_eq = |xs of [Num], ys| match (xs, ys) {
	| ([x, xs: ...], [y, ys: ...]) => x = y and is_eq(xs, ys)
	| ([], []) => true
	| (_, _) => false
}

def is_palindrome = |xs of [Num]| is_eq(xs, xs:rev)

# Problem 7

data NestedList A =
	| Elem A
	| List [NestedList A]

def flatten_inner A of [NestedList A] -> [A] = |lists| match lists {
	| [list, lists: ...] => list:flatten ++ lists:flatten_inner
	| [] => []
}

def flatten A of NestedList A -> [A] = |list| match list {
	| $Elem x => [x]
	| $List lists => lists:flatten_inner
}

#def main = flatten($List [$Elem 1, $Elem 2, $List [$Elem 3, $Elem 4], $Elem 5])

# Problem 8

def dedup = |xs of [Num]| match xs {
	| [a, b, xs: ...] => (if a = b
		then []
		else [a]) ++ dedup([b] ++ xs)
	| _ => xs
}

#def main = [1, 2, 3, 3, 3, 4, 4, 5]:dedup

# Problem 9

def pack_inner = |init, xs of [Num]| match xs {
	| [x, tail: ...] => if x = init
		then let (head, tail) = pack_inner(init, tail) in
			([x] ++ head, tail)
		else ([], xs)
	| _ => ([], [])
}

def pack = |xs of [Num]| match xs {
	| [x, ...] => let (first, tail) = pack_inner(x, xs) in
		[first] ++ tail:pack
	| [] => []
}

# def main = pack([1, 2, 2, 2, 3, 4, 4, 5])

# Problem 10

def rle_inner = |xs of [[Num]]| match xs {
	| [first, xs: ...] => match first {
		| [x, ...] => [(first:len, x)] ++ xs:rle_inner
		| [] => xs:rle_inner
	}
	| [] => []
}

def rle = |xs| xs:pack:rle_inner

def main = rle([1, 2, 2, 2, 3, 4, 4, 5])
