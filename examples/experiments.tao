fn to_str
    0 = "zero"
    n = "non-zero"

fn add x, y = x + y

fn filter
    _, [] = []
    f, [x .. xs] = [.. if x->f then [x] else [], xs]

fn factorial
    0 = 1
    m ~ n + 1 = m * n->factorial

class Sum < Zero + Add
for A < Zero + Add member A of Sum

class Product < One + Mul
for A < One + Mul member A of Product

fn sum : a -> a where
    a < Sum
is
    [] => zero
    [x .. xs] => x + xs->sum

data Maybe a
    Just a
    None

data Result a, e
    Ok a
    Err e

class Iterator
    Item
    next : Self -> (Maybe Item, Self)

member [a] of Iterator
    Item = a
    next = fn
        [] => (None, [])
        [x .. xs] => (Just x, xs)

fn foobar x, y
    let xy = x + y
    let xyz = xy + 5
    xy

def main = do
    let text = input;
    if msg = "exit" then do
        print("Now exiting...")
        print("Goodbye!")
    else do
        print("Hello, world!")
        main;







fn add : Int -> Int -> Int is
    x, y => x + y

fn len : [a] -> Nat is
    | [] -> 0
    \ [_ .. as] -> 1 + as->len

fn zip : [a] -> [b] -> [(a, b)] is
    | [a .. as], [b .. bs] => [(a, b) .. xs->zip]
    \ _, _ => []

class Sum < Zero + Add

fn sum : [a] -> a where
    a < Sum
is
    | [] => zero
    \ [a .. as] => a + as->sum

fn sum<A: Sum>(xs: [A]) -> A {
    match xs {
        [] => zero(),
        [x .. xs] => x + sum(xs),
    }
}

fn sum : [a < Sum] -> a is
    | [] => zero
    \ [a .. as] => a + as->sum
